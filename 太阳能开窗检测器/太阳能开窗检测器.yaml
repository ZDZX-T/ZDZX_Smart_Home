esphome:
  name: esp32c3-2
  friendly_name: 主卧窗台
  on_boot:
    priority: 600.0  # 传感器建立，WiFi未启动
    then:
      - switch.turn_on: LED2  # 打开LED2，提示触发boot
      - delay: 15s  # 等15s，强制进入睡眠
      - if:  # 定时到，如果不在上传模式，则进入睡眠
          condition:
            binary_sensor.is_off: update_mode
          then:
            - deep_sleep.enter: DeepSleep
  on_shutdown:
    priority: -100.0
    then:
      - switch.turn_off: LED1  # 关闭活跃指示灯
      - output.turn_off: dht11_power # 关闭DHT11电源


esp32:
  board: airm2m_core_esp32c3
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: LIGHT
  fast_connect: True
  manual_ip:
    static_ip: 192.168.3.41
    gateway: 192.168.3.1
    subnet: 255.255.255.0
  on_connect:
    - output.turn_on: dht11_power  # 打开DHT11电源
    - switch.turn_off: LED2  # boot指示灯关闭
    - switch.turn_on: LED1  # 打开活跃指示灯
    - delay: 1s  # 延时1s使引脚状态更稳定（我臆想的）
    - component.update: Solar_panel_voltage  # 上传太阳能板电压
    - component.update: Battery  # 上传电池电压
    - component.update: dht11  # 上传DHT11状态
    - if:  # 验证是否进入上传模式
        condition:
          binary_sensor.is_on: update_mode
        then:
          - script.execute: prevent_sleep
        else:  # 不是上传模式/调试模式，判断是否需要关机
          - if:
              condition:  # 电池电压低于3.0V
                sensor.in_range:
                  id: Battery
                  below: 3.0
              then:
                - if:
                    condition:  # 低电压次数为0，更新低电压开始时间
                      lambda: |-
                        return id(Low_power_wake_up_times).state == 0;
                    then:
                      - number.set:  # 设置初次低电压时间
                          id: Low_power_wake_up_timestamp
                          value: !lambda |-
                            auto time = id(TIME).now();
                            return time.timestamp;
                      - number.increment:  # 低电压次数+1
                          id: Low_power_wake_up_times
                          cycle: False
                    else:  # 低电压次数不为0
                      - number.increment:  # 低电压次数+1
                          id: Low_power_wake_up_times
                          cycle: False
                      - lambda: |-
                          auto time = id(TIME).now();
                          if (( time.timestamp - id(Low_power_wake_up_timestamp).state ) > 600 || id(Low_power_wake_up_times).state >= 5) {
                            id(low_power_shutdown).turn_on();
                          }
              else:  # 电池电压不低于3.0V
                - number.to_min: Low_power_wake_up_times  # 重置低电压次数


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #ap:
  #  ssid: "Esp32C3-2 Fallback Hotspot"
  #  password: "txu2qUIkEfTK"

captive_portal:


switch:
  - platform: gpio
    pin:
      number: GPIO12
      ignore_pin_validation_error: true
    name: "LED1"
    id: LED1
  - platform: gpio
    pin:
      number: GPIO13
      ignore_pin_validation_error: true
    name: "LED2"
    id: LED2
  - platform: shutdown
    name: "Low Power Auto Shutdown"
    id: low_power_shutdown


binary_sensor:
  - platform: gpio  # 上传模式，GPIO19接地后阻止睡眠
    pin:
      number: GPIO19
      mode:
        input: True
        pullup: True
      inverted: True
    name: "UPDATE MODE"
    id: update_mode
    device_class: update
    on_press:
      then:
        - script.execute: prevent_sleep
    on_release:
      then:
        - deep_sleep.allow: DeepSleep
        - switch.turn_off: LED2
  - platform: gpio
    pin:
      number: GPIO10
      mode:
        input: True
        pullup: True
    name: "Window 3"
    id: window3
    device_class: window
  - platform: gpio
    pin:
      number: GPIO6
      mode:
        input: True
        pullup: True
    name: "Window 2"
    id: window2
    device_class: window
  - platform: gpio
    pin:
      number: GPIO7
      mode:
        input: True
        pullup: True
    name: "Window 1"
    id: window1
    device_class: window


sensor:
  - platform: adc  # 太阳能板电压
    pin: GPIO0
    name: "Solar panel voltage"
    id: Solar_panel_voltage
    filters:
      - multiply: 6.1
    update_interval: never
  - platform: adc  # 电池电压
    pin: GPIO1
    name: "Battery"
    id: Battery
    filters:
      - multiply: 6.1
    update_interval: never
  - platform: dht
    pin: GPIO9
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    model: DHT11
    update_interval: never
    id: dht11
  - platform: template
    name: "Wakeup Cause"
    accuracy_decimals: 0
    lambda: return esp_sleep_get_wakeup_cause();

deep_sleep:
  run_duration: 5s
  sleep_duration:
    minutes: 19
    seconds: 55
  id: DeepSleep
  wakeup_pin: GPIO3
  wakeup_pin_mode: INVERT_WAKEUP

output:  # DHT11供电
  - platform: gpio
    pin: GPIO8
    id: dht11_power

script:
  - id: prevent_sleep  # 阻止睡眠脚本
    then:
      - deep_sleep.prevent: DeepSleep
      - switch.turn_on: LED2

number:
  - platform: template
    name: "Low Power Wake Up Times"  # 低电压唤醒次数
    id: Low_power_wake_up_times
    min_value: 0
    max_value: 10
    step: 1
    restore_value: True
    initial_value: 0
    optimistic: True
  - platform: template
    name: "Low Power Wake Up Timestamp"  # 低电压初次记录时间
    id: Low_power_wake_up_timestamp
    min_value: 0
    max_value: 2147483647
    step: 1
    restore_value: True
    optimistic: True

time:
  - platform: sntp
    id: TIME
    timezone: Asia/Shanghai